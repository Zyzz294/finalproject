# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'WaterMark.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import os.path
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog, QFontDialog, QMainWindow
from PyQt5.QtGui import QFontMetrics, QFontInfo
from PyQt5.QtGui import QBrush,QPixmap
from PIL import Image, ImageDraw, ImageFont, ImageEnhance

class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()

        self.setupUi(self)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(626, 615)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/friendly icons.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("color: rgb(242, 247, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(40, 270, 551, 271))
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox_2)
        self.label_3.setGeometry(QtCore.QRect(10, 120, 51, 16))
        self.label_3.setObjectName("label_3")
        self.horizontalSlider = QtWidgets.QSlider(self.groupBox_2)
        self.horizontalSlider.setGeometry(QtCore.QRect(70, 120, 161, 22))
        font = QtGui.QFont()
        font.setFamily("Microsoft Yahei")
        self.horizontalSlider.setFont(font)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_4.setGeometry(QtCore.QRect(260, 100, 281, 61))
        self.groupBox_4.setObjectName("groupBox_4")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setGeometry(QtCore.QRect(20, 20, 31, 20))
        self.label_4.setObjectName("label_4")
        self.x = QtWidgets.QLineEdit(self.groupBox_4)
        self.x.setGeometry(QtCore.QRect(60, 20, 71, 21))
        self.x.setStyleSheet("background-color: rgb(148, 182, 255);")
        self.x.setObjectName("x")
        self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5.setGeometry(QtCore.QRect(150, 20, 31, 16))
        self.label_5.setObjectName("label_5")
        self.y = QtWidgets.QLineEdit(self.groupBox_4)
        self.y.setGeometry(QtCore.QRect(180, 20, 81, 21))
        self.y.setStyleSheet("background-color: rgb(148, 182, 255);")
        self.y.setObjectName("y")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 180, 511, 71))
        self.groupBox_3.setObjectName("groupBox_3")
        self.t2 = QtWidgets.QLineEdit(self.groupBox_3)
        self.t2.setGeometry(QtCore.QRect(20, 30, 371, 31))
        self.t2.setStyleSheet("background-color: rgb(148, 182, 255);")
        self.t2.setObjectName("t2")
        self.b2 = QtWidgets.QPushButton(self.groupBox_3)
        self.b2.setGeometry(QtCore.QRect(420, 30, 71, 28))
        self.b2.setStyleSheet("background-color: rgb(100, 149, 237);\n"
"color: rgb(246, 243, 255);")
        self.b2.setObjectName("b2")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setGeometry(QtCore.QRect(10, 40, 72, 15))
        self.label.setObjectName("label")
        self.t1 = QtWidgets.QLineEdit(self.groupBox_2)
        self.t1.setGeometry(QtCore.QRect(80, 40, 141, 21))
        self.t1.setStyleSheet("background-color: rgb(148, 182, 255);")
        self.t1.setText("")
        self.t1.setObjectName("t1")
        self.b1 = QtWidgets.QPushButton(self.groupBox_2)
        self.b1.setGeometry(QtCore.QRect(250, 40, 71, 31))
        self.b1.setStyleSheet("background-color: rgb(100, 149, 237);\n"
"color: rgb(246, 243, 255);")
        self.b1.setObjectName("b1")
        self.bc = QtWidgets.QPushButton(self.centralwidget)
        self.bc.setGeometry(QtCore.QRect(500, 560, 81, 31))
        self.bc.setStyleSheet("background-color: rgb(100, 149, 237);\n"
"color: rgb(246, 243, 255);")
        self.bc.setObjectName("bc")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(40, 20, 551, 231))
        self.groupBox_5.setObjectName("groupBox_5")
        self.b = QtWidgets.QPushButton(self.groupBox_5)
        self.b.setGeometry(QtCore.QRect(432, 40, 101, 41))
        self.b.setStyleSheet("background-color: rgb(100, 149, 237);\n"
"color: rgb(246, 243, 255);")
        self.b.setObjectName("b")
        self.listWidget = QtWidgets.QListWidget(self.groupBox_5)
        self.listWidget.setGeometry(QtCore.QRect(30, 31, 381, 181))
        self.listWidget.setStyleSheet("background-color: rgb(148, 182, 255);")
        self.listWidget.setObjectName("listWidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.showMessage('Ready…… ')  # 设置状态栏默认值
        MainWindow.setStatusBar(self.statusbar)

        palette = QtGui.QPalette()
        # Set the form background adaptive
        palette.setBrush(MainWindow.backgroundRole(), QBrush(
            QPixmap("image/Markback.png").scaled(MainWindow.size(), QtCore.Qt.IgnoreAspectRatio,
                                             QtCore.Qt.SmoothTransformation)))
        MainWindow.setPalette(palette)
        MainWindow.setAutoFillBackground(True)  # Set autofill background

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Add watermark"))
        self.groupBox_2.setTitle(_translate("MainWindow", "watermark settings"))
        self.label_3.setText(_translate("MainWindow", "transparency"))
        self.groupBox_4.setTitle(_translate("MainWindow", "watermark location"))
        self.label_4.setText(_translate("MainWindow", "x-axis"))
        self.label_5.setText(_translate("MainWindow", "y-axis"))
        self.groupBox_3.setTitle(_translate("MainWindow", "storage location"))
        self.b2.setText(_translate("MainWindow", "browse"))
        self.label.setText(_translate("MainWindow", "watermark content"))
        self.b1.setText(_translate("MainWindow", "font settings"))
        self.bc.setText(_translate("MainWindow", "keep"))
        self.groupBox_5.setTitle(_translate("MainWindow", "add pictures"))
        self.b.setText(_translate("MainWindow", "add pictures"))

        # Associate add pictures
        self.b.clicked.connect(self.getFiles)
        # Associative font settings
        self.b1.clicked.connect(self.setFont)
        # Associated storage location browsing
        self.b2.clicked.connect(self.msg)
        # Associate save watermark picture
        self.bc.clicked.connect(self.addMark)
        # Association list image preview
        self.listWidget.itemClicked.connect(self.itemClick)

    # Determine if it is a picture
    def isImg(self, file):
        file = file.lower()
        if file == '.jpg':
            return True
        elif file == '.png':
            return True
        elif file == '.jpeg':
            return True
        elif file == '.bmp':
            return True
        else:
            return False

        # get image path
    def getFiles(self):
        try:
            # Select the image folder path
            self.img_path = QFileDialog.getExistingDirectory(None, "Select the image folder path", os.getcwd())
            self.list = os.listdir(self.img_path)  # Iterate over selected folders
            num = 0  # Record the number of pictures
            self.listWidget.clear()  # clear list item
            for i in range(0, len(self.list)):
                    # Traverse the list of images
                filepath = os.path.join(self.img_path, self.list[i])  # Record the file name traversed to
                if os.path.isfile(filepath):  # Determine whether it is a file
                    imgType = os.path.splitext(filepath)[1]  # get extension
                    if self.isImg(imgType):  # Determine if it is a picture
                        num += 1  # Add 1 to the number of pictures
                        self.item = QtWidgets.QListWidgetItem(self.listWidget)  # Create list items
                        self.item.setText(self.list[i])  # Show picture list
            self.statusbar.showMessage('Shared pictures' + str(num) + 'open')  # The status bar shows the total number of pictures
        except Exception:
            QMessageBox.warning(None, 'warn', 'Please select a valid path...')

    # preview picture
    def itemClick(self, item):
        os.startfile(self.img_path + '\\' + item.text())

    # set font
    def setFont(self):
        self.waterfont, ok = QFontDialog.getFont()  # Show font dialog
        if ok:  # Determine if a font is selected
            self.t1.setFont(self.waterfont)  # Set the font of the watermark text
            self.fontSize = QFontMetrics(self.waterfont)  # get font size
            self.fontInfo = QFontInfo(self.waterfont)  # Get font information

    # set storage path
    def msg(self):
        try:
            # dir_path is the absolute path of the selected folder, the second parameter is the dialog title, and the third is the default path after the dialog is opened
            self.dir_path = QFileDialog.getExistingDirectory(None, "Choose a path", os.getcwd())
            self.t2.setText(self.dir_path)  # Displays the selected save path
        except Exception as e:
            print(e)

    # Add text watermark
    def textMark(self, img, newImgPath):
        try:
            im = Image.open(img).convert('RGBA')  # Open the original image and convert to RGBA
            newImg = Image.new('RGBA', im.size, (255, 255, 255, 0))  #Store the image after adding the watermark
            fonttype = 'Font\\' + self.fontInfo.family() + '.ttf'  # 'simkai.ttf'
            font = ImageFont.truetype(fonttype, self.fontInfo.pointSize(), encoding="utf-8")
            #print("pass")
            imagedraw = ImageDraw.Draw(newImg)  # Create paint objects
                #       imagewidth,imageheight = im.size    #record image size
                #      txtwidth = self.fontSize.maxWidth()*len(self.t1.text())     #get font width
                #     txtheight = self.fontSize.height()  #get font height

                # Set watermark text position
            X = eval(self.x.text())
            Y = eval(self.y.text())
            position = (X, Y)

            imagedraw.text(xy=position, text=self.t1.text(), font=font, fill=(255, 255, 255, 60))

            # set transparency
            alpha = newImg.split()[3]
            alpha = ImageEnhance.Brightness(alpha).enhance(int(self.horizontalSlider.value()) / 10.0)
            newImg.putalpha(alpha)
            # save Picture
            out = Image.alpha_composite(im, newImg)
            out = out.convert('RGB')
            out.save(newImgPath)


        except Exception as e1:
            print(e1)
            QMessageBox.warning(None, 'mistake', 'The image format is incorrect, please select again...', QMessageBox.Ok)

    # Add watermark
    def addMark(self):
        if self.t2.text() == '':  # Determine whether the save path is selected
            QMessageBox.warning(None, 'warn', 'Please select a save path', QMessageBox.Ok)
            return
        else:
            num = 0  # Record the number of pictures
            for i in range(0, self.listWidget.count()):  # Traverse the list of pictures
                   # Set the original image path (including file name)
                filepath = os.path.join(self.img_path, self.listWidget.item(i).text())
                    # Set the watermark image save path (including file name)
                newfilepath = os.path.join(self.t2.text(), self.listWidget.item(i).text())
                if self.t1.text() == '':  # Determine whether the watermark text is entered
                    QMessageBox.warning(None, 'warn', 'Please enter watermark text', QMessageBox.Ok)
                    return
                else:
                    self.textMark(filepath, newfilepath)  # Call textMark method to add text watermark
                    num += 1  # Add one to the number of processed images
            self.statusbar.showMessage('The task is completed, this time a total of processing' + str(num) + ' pictures')  # Display the total number of processed pictures

